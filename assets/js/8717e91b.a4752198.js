"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[338],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(k,i(i({ref:t},c),{},{components:a})):n.createElement(k,i({ref:t},c))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},334:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:2},i="Code Generation",l={unversionedId:"for-developers/code-generation",id:"for-developers/code-generation",title:"Code Generation",description:"Like we already said, the main Spark classes are auto generated in Zio-Spark. We have to add our own classes because",source:"@site/../docs/for-developers/code-generation.md",sourceDirName:"for-developers",slug:"/for-developers/code-generation",permalink:"/zio-spark/for-developers/code-generation",draft:!1,editUrl:"https://github.com/univalence/zio-spark/edit/master/docs/../docs/for-developers/code-generation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/zio-spark/for-developers/overview"},next:{title:"Installing ZIO Spark Test",permalink:"/zio-spark/testing/installation"}},s={},p=[{value:"Example",id:"example",level:2},{value:"Overlays",id:"overlays",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"code-generation"},"Code Generation"),(0,r.kt)("p",null,"Like we already said, the main Spark classes are auto generated in Zio-Spark. We have to add our own classes because\nSpark is Impure and not ZIO aware."),(0,r.kt)("p",null,"A generated class is composed by three kind of codes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The code automatically generated from Spark"),(0,r.kt)("li",{parentName:"ul"},"The scala version specific code written in Zio-Spark to add Zio-Spark functionalities"),(0,r.kt)("li",{parentName:"ul"},"The scala version non-specific code written in Zio-Spark to add Zio-Spark functionalities")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Generally speaking here is the workflow that auto-generate a Zio-Spark class:"),(0,r.kt)("p",null,"Let's take ",(0,r.kt)("inlineCode",{parentName:"p"},"Dataset")," as an example !"),(0,r.kt)("p",null,"Everything start with a GenerationPlan, the plan read sources from Spark and use them to generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"Zio-Spark")," sources.\nWe decided to store the generated file in ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-spark-core/src/main/scala-$version/zio/spark/sql/Dataset.scala")," directly.\nIt allows us to compare the differences using git and it is clearer for people to understand what's happening."),(0,r.kt)("p",null,"When SBT is compiling the ",(0,r.kt)("inlineCode",{parentName:"p"},"core")," module, based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-spark-codegen")," plugin :"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We read the Spark code source of the ",(0,r.kt)("inlineCode",{parentName:"li"},"Dataset")," using SBT\n(in ",(0,r.kt)("inlineCode",{parentName:"li"},"org.apache.spark/spark-sql:org/apache/spark/sql/Dataset.scala"),")"),(0,r.kt)("li",{parentName:"ol"},"We use Scalameta to read the source, analyse, and generate the code for zio-spark",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"We group all class methods by type and wrapping them."),(0,r.kt)("li",{parentName:"ul"},"We need to specify class specific import and folks."),(0,r.kt)("li",{parentName:"ul"},"We add extra chunks of code from the overlays"))),(0,r.kt)("li",{parentName:"ol"},"We write the merged output for the target scala version (current ",(0,r.kt)("inlineCode",{parentName:"li"},"$version")," used by the core module during\ncompilation) into  ",(0,r.kt)("inlineCode",{parentName:"li"},"zio-spark-core/src/main/scala-$version/zio/spark/sql/Dataset.scala"))),(0,r.kt)("h3",{id:"overlays"},"Overlays"),(0,r.kt)("p",null,"At the beginning, the generated code contains only one kind of code: the code automatically generated from Spark."),(0,r.kt)("p",null,"You can then use this code to generate an overlays. They allow us to add our scala version specific and non-specific\nfunctions."),(0,r.kt)("p",null,"These overlays can be found in ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-spark-core/src/it/scala..."),"."),(0,r.kt)("p",null,"For Dataset, you will find four overlays:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"zio-spark-core/src/it/scala/DatasetOverlay.scala")," -> The code shared by all scala versions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"zio-spark-core/src/it/scala-$version/DatasetOverlay.scala")," -> The code specific for all scala versions")),(0,r.kt)("p",null,"For general name pattern is ",(0,r.kt)("inlineCode",{parentName:"p"},"${ClassName}Overlay")," (",(0,r.kt)("inlineCode",{parentName:"p"},"$ClassName")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Dataset"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"RDD"),", ...)"),(0,r.kt)("p",null,"If you recompile adding these overlays, the function between ",(0,r.kt)("inlineCode",{parentName:"p"},"template:on")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"template:off")," will be added to the\ngenerated code."))}u.isMDXComponent=!0}}]);