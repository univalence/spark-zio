"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[661],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(a),h=r,y=u["".concat(c,".").concat(h)]||u[h]||m[h]||s;return a?n.createElement(y,o(o({ref:t},p),{},{components:a})):n.createElement(y,o({ref:t},p))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var i=2;i<s;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},6343:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=a(7462),r=(a(7294),a(3905));const s={sidebar_position:3},o="Schemas",l={unversionedId:"sql-package/case-class-to-schema",id:"sql-package/case-class-to-schema",title:"Schemas",description:"A DataFrame in Spark always have a schema.",source:"@site/../docs/sql-package/case-class-to-schema.md",sourceDirName:"sql-package",slug:"/sql-package/case-class-to-schema",permalink:"/zio-spark/sql-package/case-class-to-schema",draft:!1,editUrl:"https://github.com/univalence/zio-spark/edit/master/docs/../docs/sql-package/case-class-to-schema.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"TryAnalysis",permalink:"/zio-spark/sql-package/try-analysis"},next:{title:"Overview",permalink:"/zio-spark/for-developers/overview"}},c={},i=[],p={toc:i},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"schemas"},"Schemas"),(0,r.kt)("p",null,"A DataFrame in Spark always have a schema. "),(0,r.kt)("p",null,"Generally, people have two ways to create it:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"They infer the schema from the source files (not recommended since the schema can change and because the inference can\nbe wrong)"),(0,r.kt)("li",{parentName:"ul"},"They create a StructType and provide it to the DataFrameReader")),(0,r.kt)("p",null,"Defining your schema is a best practice, and you should always do that. However, creating a StructType is annoying\nand this is even more true when you want to deal with a Dataset","[T]",". "),(0,r.kt)("p",null,"For example, imagine you have the following CSV:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"name;age;phone\njohn;10;\nfella;30;+3360000000\n")),(0,r.kt)("p",null,"If you want to manipulate it as a Dataset","[Person]"," you will have to write something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.spark.sql._\nimport org.apache.spark.sql.types._\n\ncase class Person(name: String, age: Int, phone: Option[String])\n\nval schema =\n  StructType(\n    Seq(\n      StructField("name", StringType, nullable  = false),\n      StructField("age", IntegerType, nullable = false),\n      StructField("phone", StringType, nullable = true)\n    )\n  )\n  \nval ds Dataset[Person] = SparkSession.read.schema(schema).csv("path").as[Person].getOrThrow\n')),(0,r.kt)("p",null,"ZIO-Spark, using magnolia, allows you to derive the StructType from your case class automatically:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.spark.sql._\n\ncase class Person(name: String, age: Int, phone: Option[String])\n\nval ds Dataset[Person] = SparkSession.read.schema[Person].csv("path").as[Person].getOrThrow\n')))}m.isMDXComponent=!0}}]);