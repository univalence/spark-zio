"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[470],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4326:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={slug:"/code-examples",sidebar_position:7},l="Code Examples",c={unversionedId:"codeSnipets",id:"codeSnipets",title:"Code Examples",description:"Seq to Dataset",source:"@site/../docs/codeSnipets.md",sourceDirName:".",slug:"/code-examples",permalink:"/zio-spark/code-examples",editUrl:"https://github.com/univalence/zio-spark/edit/master/docs/../docs/codeSnipets.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{slug:"/code-examples",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/zio-spark/faq"},next:{title:"Versioning process choice",permalink:"/zio-spark/adrs/choose-versioning-process"}},p=[{value:"Seq to Dataset",id:"seq-to-dataset",children:[],level:2},{value:"Manage Error on Loads",id:"manage-error-on-loads",children:[],level:2},{value:"Manage Analysis Errors",id:"manage-analysis-errors",children:[],level:2},{value:"Cancellable Effects + Caching",id:"cancellable-effects--caching",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"code-examples"},"Code Examples"),(0,o.kt)("h2",{id:"seq-to-dataset"},"Seq to Dataset"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\n//don\'t need to import ss.implicits anymore\nimport zio.spark.sql.implicits._\n\n//implicits on sequence\nval createPersonDs: URIO[SparkSession, Dataset[Person]] = Seq(Person("toto", 13)).toDS\n\n')),(0,o.kt)("h2",{id:"manage-error-on-loads"},"Manage Error on Loads"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\n//use of ZIO + effects composition to load a file or another if it doesn\'t work\nval input: ZIO[SparkSession, Throwable, DataFrame] = SparkSession.read.csv("path1") orElse SparkSession.read.csv("path2")\n\n')),(0,o.kt)("h2",{id:"manage-analysis-errors"},"Manage Analysis Errors"),(0,o.kt)("p",null,"Analysis erros, are error returned by Spark (",(0,o.kt)("inlineCode",{parentName:"p"},"org.apache.spark.sql.AnalysisException"),") when something wrong happen building\nthe data transformation. For example, if you select a field that do not exist, of it you try to cast ",(0,o.kt)("inlineCode",{parentName:"p"},"as")," a type, for\nthe Dataframe schema doesn't match."),(0,o.kt)("p",null,"In zio-spark, those potential errors are isolated, you can either : "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"recover from them"),(0,o.kt)("li",{parentName:"ul"},"throws directly (as would apache spark do)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.spark.sql.implicits._ //if not done already that the beginning of the file\n\n//explicit error management + encoder on Person\ndef process1(input: DataFrame): Task[Long] = input.as[Person] match {\n  case TryAnalysis.Failure(_) => input.filter("age >= 18").getOrThrow.count\n  case TryAnalysis.Success(ds) => ds.count\n}\n\n//less error management\ndef process2(input: DataFrame) = {\n  import zio.spark.sql.syntax.throwsAnalysisException._\n\n  val selectPerson:Dataset[Person] = input.as[Person]\n  selectPerson.filter(_.isAdult).count\n\n}\n')),(0,o.kt)("h2",{id:"cancellable-effects--caching"},"Cancellable Effects + Caching"),(0,o.kt)("p",null,"Caching mechanism is from Spark, it's effecful, you need to call it before doing a computation to mark the dataset as something\nto be cached. CancellableEffect is an experimental feature from zio-spark, that allow to propagate an Interrupt to stop the job. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"\n//cache, cancellable\ndef improveProcess(input: DataFrame): ZIO[SparkSession, Throwable, Long] =\n  for {\n    cached <- input.cache\n    p = CancellableEffect.makeItCancellable(process(cached))\n    //if the first job is stale, it launches a second job. When on of the jobs finish, it stops the remaining job\n    count <- p.race(p.delay(10.seconds))\n  } yield count\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"")))}d.isMDXComponent=!0}}]);